AWSTemplateFormatVersion: 2010-09-09
Description: XWS Resources

Resources:
  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: alerts.xml
        ErrorDocument: error.html
      BucketName: !Sub ${AWS::StackName}-files
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - HEAD
              - GET
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - ETag
  
  ContactQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: !Sub ${AWS::StackName}-contact-queue-dlq.fifo

  ContactQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: !Sub ${AWS::StackName}-contact-queue.fifo
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ContactQueueDLQ.Arn
        maxReceiveCount: 3
  
  MessageQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-message-queue-dlq

  MessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-message-queue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MessageQueueDLQ.Arn
        maxReceiveCount: 3

  AlertIssuedQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: !Sub ${AWS::StackName}-alert-issued-queue-dlq.fifo

  AlertIssuedQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: !Sub ${AWS::StackName}-alert-issued-queue.fifo
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AlertIssuedQueueDLQ.Arn
        maxReceiveCount: 3
  
  AlertUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-alert-updated.fifo
      FifoTopic: true
      ContentBasedDeduplication: true
      DisplayName: Alert updated topic

  AlertPublishedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-alert-published
      DisplayName: Alert published

  ContactUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-contact-updated.fifo
      FifoTopic: true
      ContentBasedDeduplication: true
      DisplayName: Contact updated topic

  AlertDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-alert-db
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  ContactDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-contact-db
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  SubscriptionDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-subscription-db
      AttributeDefinitions:
        - AttributeName: code
          AttributeType: S
        - AttributeName: endpoint
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: channel
          AttributeType: S
      KeySchema:
        - AttributeName: code
          KeyType: HASH
        - AttributeName: endpoint
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: user-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: channel
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  ProcessAlert:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-process-alert
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        ZipFile: |
            exports.handler = function (event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
              return 'ok'
            }
      Role: !GetAtt ProcessAlertLambdaExecutionRole.Arn
      Timeout: 20
      Environment:
        Variables:
          ALERT_TABLE_NAME: !Ref AlertDB
          ALERT_UPDATED_TOPIC_ARN: !Ref AlertUpdatedTopic
    DependsOn:
      - AlertDB
      - ProcessAlertLambdaExecutionRole

  PublishAlert:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-publish-alert
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        ZipFile: |
            exports.handler = function (event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
              return 'ok'
            }
      Role: !GetAtt PublishAlertLambdaExecutionRole.Arn
      Timeout: 20
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref FilesBucket
          S3_BUCKET_DOMAIN_NAME: !GetAtt FilesBucket.RegionalDomainName
          ALERT_TABLE_NAME: !Ref AlertDB
          ALERT_PUBLISHED_TOPIC_ARN: !Ref AlertPublishedTopic
    DependsOn:
      - AlertDB
      - AlertIssuedQueue
      - PublishAlertLambdaExecutionRole

  ProcessContact:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-process-contact
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        ZipFile: |
            exports.handler = function (event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
              return 'ok'
            }
      Role: !GetAtt ProcessContactLambdaExecutionRole.Arn
      Timeout: 20
      Environment:
        Variables:
          CONTACT_UPDATED_TOPIC_ARN: !Ref ContactUpdatedTopic
    DependsOn:
      - ContactDB
      - ContactUpdatedTopic
      - ProcessContactLambdaExecutionRole

  ProcessSubscription:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-process-subscription
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        ZipFile: |
            exports.handler = function (event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
              return 'ok'
            }
      Role: !GetAtt ProcessSubscriptionLambdaExecutionRole.Arn
      Timeout: 20
      Environment:
        Variables:
          CONTACT_TABLE_NAME: !Ref ContactDB
          SUBSCRIPTION_TABLE_NAME: !Ref SubscriptionDB
          AREA_API_URL: <ENTER>
    DependsOn:
      - ContactDB
      - SubscriptionDB
      - ContactQueue
      - ProcessSubscriptionLambdaExecutionRole

  ProcessAlertLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
                Effect: Allow
              - Action:
                  - sns:*
                Resource: !Ref AlertUpdatedTopic
                Effect: Allow
              - Action:
                  - dynamodb:*
                Resource: !GetAtt AlertDB.Arn
                Effect: Allow
              - Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !GetAtt AlertDB.StreamArn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  PublishAlertLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
                Effect: Allow
              - Action:
                  - sns:*
                Resource: !Ref AlertPublishedTopic
                Effect: Allow
              - Action:
                  - dynamodb:*
                Resource: !GetAtt AlertDB.Arn
                Effect: Allow
              - Action:
                  - s3:*
                Resource: !GetAtt FilesBucket.Arn
                Effect: Allow
              - Action:
                  - s3:*
                Resource: !Join ['', [!GetAtt FilesBucket.Arn, '/*']]
                Effect: Allow
              - Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt AlertIssuedQueue.Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  ProcessContactLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
                Effect: Allow
              - Action:
                  - sns:Publish
                Resource: !Ref ContactUpdatedTopic
                Effect: Allow
              - Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !GetAtt ContactDB.StreamArn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  ProcessSubscriptionLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
                Effect: Allow
              - Action:
                  - dynamodb:*
                Resource: !GetAtt ContactDB.Arn
                Effect: Allow
              - Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt SubscriptionDB.Arn
                  - !Sub 
                    - '${Arn}/index/*'
                    - Arn: !GetAtt SubscriptionDB.Arn
                Effect: Allow
              - Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt ContactQueue.Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  
  QueueMessages:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-queue-messages
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        ZipFile: |
            exports.handler = function (event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
              return 'ok'
            }
      Role: !GetAtt QueueMessagesLambdaExecutionRole.Arn
      Timeout: 300
      Environment:
        Variables:
          SUBSCRIPTION_TABLE_NAME: !Ref SubscriptionDB
          MESSAGE_QUEUE_URL: !Ref MessageQueue
    DependsOn:
      - QueueMessagesLambdaExecutionRole

  QueueMessagesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
                Effect: Allow
              - Action:
                  - dynamodb:*
                Resource: !GetAtt SubscriptionDB.Arn
                Effect: Allow
              - Action:
                  - sqs:SendMessage
                Resource: !GetAtt MessageQueue.Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  SendMessages:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-send-messages
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        ZipFile: |
            exports.handler = function (event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
              return 'ok'
            }
      Role: !GetAtt SendMessagesLambdaExecutionRole.Arn
      Timeout: 20
      Environment:
        Variables:
          NOTIFY_API_KEY: <ENTER>
          NOTIFY_EMAIL_TEMPLATE_ID: <ENTER>
          NOTIFY_SMS_TEMPLATE_ID: <ENTER>
    DependsOn:
      - SendMessagesLambdaExecutionRole

  SendMessagesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
                Effect: Allow
              - Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt MessageQueue.Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  QueueMessagesInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref QueueMessages
      Principal: sns.amazonaws.com

  AlertDBTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt AlertDB.StreamArn
      FunctionName: !GetAtt ProcessAlert.Arn
      StartingPosition: LATEST

  ContactDBTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt ContactDB.StreamArn
      FunctionName: !GetAtt ProcessContact.Arn
      StartingPosition: LATEST

  ContactQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                # - events.amazonaws.com
                # - sqs.amazonaws.com
                - sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt ContactQueue.Arn
      Queues:
        - !Ref ContactQueue

  ContactConfirmedSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt ContactQueue.Arn
      Protocol: sqs
      TopicArn: !Ref ContactUpdatedTopic
      RawMessageDelivery: true
      FilterPolicy:
        action:
          - confirmed

  QueueMessagesSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt QueueMessages.Arn
      Protocol: lambda
      TopicArn: !Ref AlertPublishedTopic

  ContactSubscriptionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt ContactQueue.Arn
      FunctionName: !GetAtt ProcessSubscription.Arn

  SendMessagesEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt MessageQueue.Arn
      FunctionName: !GetAtt SendMessages.Arn

  AlertIssuedSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt AlertIssuedQueue.Arn
      Protocol: sqs
      TopicArn: !Ref AlertUpdatedTopic
      RawMessageDelivery: true
      FilterPolicy:
        action:
          - issued

  AlertIssuedEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt AlertIssuedQueue.Arn
      FunctionName: !GetAtt PublishAlert.Arn

  AlertIssuedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt AlertIssuedQueue.Arn
      Queues:
        - !Ref AlertIssuedQueue

  # Create the 'messages' SQS DL queue
  # MessagesDLQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: !Sub ${AWS::StackName}-messages-dlq

  # # Create the 'message' SQS queue
  # MessagesQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: !Sub ${AWS::StackName}-messages
  #     RedrivePolicy:
  #       deadLetterTargetArn: !GetAtt MessagesDLQueue.Arn
  #       maxReceiveCount: 1

  # MessagesQueueURL: 
  #   Description: URL of messages queue
  #   Value: 
  #     Ref: MessagesQueue
  # MessagesQueueARN: 
  #   Description: ARN of messages queue
  #   Value: !GetAtt MessagesQueue.Arn
  # MessagesDLQueueURL: 
  #   Description: URL of messages dead-letter queue
  #   Value: !Ref MessagesDLQueue
  # MessagesDLQueueARN: 
  #   Description: ARN of messages dead-letter queue
  #   Value: !GetAtt MessagesDLQueue.Arn

  # ContactMessageEnqueuerRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Description: Lambda Enqueuer Role
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - lambda.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Path: "/"
  #     Policies:
  #     - PolicyName: AllowLogs
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - logs:*
  #           Resource: arn:aws:logs:*:*:*

  # ContactMessageEmailSenderRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Description: Contact Message Email Sender Role
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - lambda.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Path: "/"
  #     Policies:
  #     - PolicyName: AllowLogs
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - logs:*
  #           Resource: arn:aws:logs:*:*:*
  #     - PolicyName: AllowSqs
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - sqs:ReceiveMessage
  #           - sqs:DeleteMessage
  #           - sqs:GetQueueAttributes
  #           - sqs:ChangeMessageVisibility
  #           Resource: !GetAtt ContactMessageEmailQueue.Arn

  # ContactMessageSMSSenderRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Description: Contact Message SMS Sender Role
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - lambda.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Path: "/"
  #     Policies:
  #     - PolicyName: AllowLogs
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - logs:*
  #           Resource: arn:aws:logs:*:*:*
  #     - PolicyName: AllowSqs
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - sqs:ReceiveMessage
  #           - sqs:DeleteMessage
  #           - sqs:GetQueueAttributes
  #           - sqs:ChangeMessageVisibility
  #           Resource: !GetAtt ContactMessageSMSQueue.Arn

  # ContactMessageVoiceSenderRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Description: Contact Message Voice Sender Role
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - lambda.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Path: "/"
  #     Policies:
  #     - PolicyName: AllowLogs
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - logs:*
  #           Resource: arn:aws:logs:*:*:*
  #     - PolicyName: AllowSqs
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - sqs:ReceiveMessage
  #           - sqs:DeleteMessage
  #           - sqs:GetQueueAttributes
  #           - sqs:ChangeMessageVisibility
  #           Resource: !GetAtt ContactMessageVoiceQueue.Arn

  # # Notifications
  # MessageApprovedTopic:
  #   Type: AWS::SNS::Topic
  #   Properties: 
  #     DisplayName: Message approved topic
  #     TopicName: !Join 
  #       - '-'
  #       - - !Ref AWS::StackName
  #         - message
  #         - approved

  # Subscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     Endpoint: david.stone@defra.net
  #     Protocol: email
  #     TopicArn: !Ref 'MessageApprovedTopic'
  
  # # Functions
  # ContactMessageEnqueuer:
  #   Type: AWS::Lambda::Function
  #   Properties: 
  #     Handler: index.handler
  #     Code: 
  #       ZipFile: |
  #           exports.handler = function (event, context) {
  #             console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
  #             return 'ok'
  #           }
  #     # DeadLetterConfig: 
  #     #   DeadLetterConfig
  #     Description: Contact Message Enqueuer
  #     # Environment: 
  #     #   Environment
  #     FunctionName: ContactMessageEnqueuer
  #     Role: !GetAtt ["ContactMessageEnqueuerRole", "Arn"]
  #     #  !Ref 'ContactMessageEnqueuerRole'
  #     Runtime: nodejs12.x
  #     Timeout: 10

  # ContactMessageEmailSender:
  #   Type: AWS::Lambda::Function
  #   Properties: 
  #     Handler: index.handler
  #     Code: 
  #       ZipFile: |
  #           exports.handler = function (event, context) {
  #             console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
  #             return 'ok'
  #           }
  #     # DeadLetterConfig: 
  #     #   DeadLetterConfig
  #     Description: Contact Message Email Sender
  #     # Environment: 
  #     #   Environment
  #     FunctionName: ContactMessageEmailSender
  #     Role: !GetAtt ["ContactMessageEmailSenderRole", "Arn"]
  #     Runtime: nodejs12.x
  #     Timeout: 10

  # ContactMessageSMSSender:
  #   Type: AWS::Lambda::Function
  #   Properties: 
  #     Handler: index.handler
  #     Code: 
  #       ZipFile: |
  #           exports.handler = function (event, context) {
  #             console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
  #             return 'ok'
  #           }
  #     # DeadLetterConfig: 
  #     #   DeadLetterConfig
  #     Description: Contact Message SMS Sender
  #     # Environment: 
  #     #   Environment
  #     FunctionName: ContactMessageSMSSender
  #     Role: !GetAtt ["ContactMessageSMSSenderRole", "Arn"]
  #     Runtime: nodejs12.x
  #     Timeout: 10

  # ContactMessageVoiceSender:
  #   Type: AWS::Lambda::Function
  #   Properties: 
  #     Handler: index.handler
  #     Code: 
  #       ZipFile: |
  #           exports.handler = function (event, context) {
  #             console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
  #             return 'ok'
  #           }
  #     # DeadLetterConfig: 
  #     #   DeadLetterConfig
  #     Description: Contact Message Voice Sender
  #     # Environment: 
  #     #   Environment
  #     FunctionName: ContactMessageVoiceSender
  #     Role: !GetAtt ["ContactMessageVoiceSenderRole", "Arn"]
  #     Runtime: nodejs12.x
  #     Timeout: 10

  # # Queues
  # ContactMessageEmailQueue:
  #   Type: AWS::SQS::Queue
  #   Properties: 
  #     QueueName: !Join 
  #       - '-'
  #       - - !Ref AWS::StackName
  #         - contact
  #         - message
  #         - email
  #         - queue

  # ContactMessageSMSQueue:
  #   Type: AWS::SQS::Queue
  #   Properties: 
  #     QueueName: !Join 
  #       - '-'
  #       - - !Ref AWS::StackName
  #         - contact
  #         - message
  #         - sms
  #         - queue

  # ContactMessageVoiceQueue:
  #   Type: AWS::SQS::Queue
  #   Properties: 
  #     QueueName: !Join 
  #       - '-'
  #       - - !Ref AWS::StackName
  #         - contact
  #         - message
  #         - voice
  #         - queue

  # # Rules
  # ApprovedRule:
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Description: Message approved rule
  #     EventBusName: !GetAtt ["EventBus", "Name"]
  #     EventPattern:
  #       detail-type:
  #         - xws-message-approved
  #       account:
  #         - !Ref AWS::AccountId
  #     Name: !Join 
  #       - '-'
  #       - - !Ref AWS::StackName
  #         - message
  #         - approved
  #         - rule
  #     Targets:
  #       - Arn: !Ref 'MessageApprovedTopic'
  #         Id: !Join 
  #           - '-'
  #           - - !Ref AWS::StackName
  #             - message
  #             - approved
  #             - rule
  #             - to
  #             - sns
  #             - topic
  #       - Arn: !GetAtt ["ContactMessageEnqueuer", "Arn"]
  #         Id: !Join 
  #           - '-'
  #           - - !Ref AWS::StackName
  #             - message
  #             - approved
  #             - rule
  #             - to
  #             - lambda
  #             - contact
  #             - message
  #             - enqueuer

  # ContactMessageEmailRule:
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Description: Contact message Email rule
  #     EventBusName: !GetAtt ["EventBus", "Name"]
  #     EventPattern:
  #       detail-type:
  #         - xws-contact-message
  #       account:
  #         - !Ref AWS::AccountId
  #       detail:
  #         contact:
  #           kind:
  #             - email

  #     Name: !Join 
  #       - '-'
  #       - - !Ref AWS::StackName
  #         - contact
  #         - message
  #         - email
  #         - rule
  #     Targets:
  #       - Arn: !GetAtt ["ContactMessageEmailQueue", "Arn"]
  #         Id: !Join 
  #           - '-'
  #           - - !Ref AWS::StackName
  #             - contact
  #             - message
  #             - rule
  #             - to
  #             - sqs

  # ContactMessageSMSRule:
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Description: Contact message SMS rule
  #     EventBusName: !GetAtt ["EventBus", "Name"]
  #     EventPattern:
  #       detail-type:
  #         - xws-contact-message
  #       account:
  #         - !Ref AWS::AccountId
  #       detail:
  #         contact:
  #           kind:
  #             - mobile
  #     Name: !Join 
  #       - '-'
  #       - - !Ref AWS::StackName
  #         - contact
  #         - message
  #         - sms
  #         - rule
  #     Targets:
  #       - Arn: !GetAtt ["ContactMessageSMSQueue", "Arn"]
  #         Id: !Join 
  #           - '-'
  #           - - !Ref AWS::StackName
  #             - contact
  #             - message
  #             - rule
  #             - to
  #             - sqs
  
  # ContactMessageVoiceRule:
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Description: Contact message Voice rule
  #     EventBusName: !GetAtt ["EventBus", "Name"]
  #     EventPattern:
  #       detail-type:
  #         - xws-contact-message
  #       account:
  #         - !Ref AWS::AccountId
  #       detail:
  #         contact:
  #           kind:
  #             - landline
  #     Name: !Join 
  #       - '-'
  #       - - !Ref AWS::StackName
  #         - contact
  #         - message
  #         - voice
  #         - rule
  #     Targets:
  #       - Arn: !GetAtt ["ContactMessageVoiceQueue", "Arn"]
  #         Id: !Join 
  #           - '-'
  #           - - !Ref AWS::StackName
  #             - contact
  #             - message
  #             - rule
  #             - to
  #             - sqs

  # # Function Event Source Mappings
  # ContactMessageEmailSenderEventSourceMapping:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     BatchSize: 1
  #     Enabled: true
  #     EventSourceArn: !GetAtt ContactMessageEmailQueue.Arn
  #     FunctionName: !GetAtt ContactMessageEmailSender.Arn

  # ContactMessageSMSSenderEventSourceMapping:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     BatchSize: 1
  #     Enabled: true
  #     EventSourceArn: !GetAtt ContactMessageSMSQueue.Arn
  #     FunctionName: !GetAtt ContactMessageSMSSender.Arn

  # ContactMessageVoiceSenderEventSourceMapping:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     BatchSize: 1
  #     Enabled: true
  #     EventSourceArn: !GetAtt ContactMessageVoiceQueue.Arn
  #     FunctionName: !GetAtt ContactMessageVoiceSender.Arn

  # # Policies
  # EventTopicPolicy:
  #   Type: AWS::SNS::TopicPolicy
  #   Properties:
  #     PolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: events.amazonaws.com
  #           Action: sns:Publish
  #           Resource: '*'
  #     Topics:
  #       - !Ref MessageApprovedTopic

  # EventQueuePolicy:
  #   Type: AWS::SQS::QueuePolicy
  #   Properties:
  #     PolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: events.amazonaws.com
  #           Action: sqs:SendMessage
  #           Resource: '*'
  #     Queues:
  #       - !Ref ContactMessageEmailQueue
  #       - !Ref ContactMessageSMSQueue
  #       - !Ref ContactMessageVoiceQueue

  # PermissionForEventsToInvokeLambda: 
  #     Type: AWS::Lambda::Permission
  #     Properties: 
  #       FunctionName: !GetAtt ["ContactMessageEnqueuer", "Arn"]
  #       Action: "lambda:InvokeFunction"
  #       Principal: "events.amazonaws.com"
  #       SourceArn: 
  #         Fn::GetAtt: 
  #           - "ApprovedRule"
  #           - "Arn"
